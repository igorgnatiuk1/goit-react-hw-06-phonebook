{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Section/Section.js","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","v4","deleteContact","changeFilter","connect","contacts","items","dispatch","onSubmit","contact","contactsActions","useState","setName","setNumber","handleChange","event","currentTarget","value","reset","preventDefault","options","find","toLowerCase","alert","className","styles","form","label","input","onChange","type","pattern","title","required","button","getVisibleContacts","allContats","filter","normalizedFilter","includes","onDelete","list","map","item","onClick","state","target","Section","children","section","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","actions","action","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devtools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b9c7b609.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1DQlQ\",\"item\":\"ContactList_item__2tIlO\",\"button\":\"ContactList_button__Qc_-y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__128Wb\",\"label\":\"Filter_label__2X2Xo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2CLre\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n    payload: {\r\n        id: v4(),\r\n        name,\r\n        number,\r\n    },\r\n}));\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact, changeFilter };\r\n\r\n// v1\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: v4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });","import {useState} from \"react\";\r\nimport styles from './ContactForm.module.css'\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\n\r\n\r\nfunction ContactForm({ onSubmit, contacts }) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const options = { name, number };\r\n\r\n        if (\r\n            contacts.find(\r\n                contact => name.toLowerCase() === contact.name.toLowerCase(),\r\n            )\r\n        ) {\r\n            alert(`${name} is already in contacts`);\r\n        } else {\r\n            onSubmit(options);\r\n        }\r\n\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n\r\n\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <label className={styles.label}> Name\r\n                <input className={styles.input}\r\n                       onChange={handleChange}\r\n                       value={name}\r\n                       type=\"text\"\r\n                       name=\"name\"\r\n                       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                       title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                       required\r\n                />\r\n            </label>\r\n            <label className={styles.label}> Number\r\n                <input className={styles.input}\r\n                       onChange={handleChange}\r\n                       value={number}\r\n                       type=\"tel\"\r\n                       name=\"number\"\r\n                       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                       title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                       required\r\n                />\r\n            </label>\r\n            <button type=\"Submit\" className={styles.button}>Add</button>\r\n\r\n        </form>\r\n    )\r\n\r\n}\r\nconst mapStateToProps = ({ contacts: { items } }) => ({\r\n    contacts: items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: contact => dispatch(contactsActions.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import PropTypes from 'prop-types'\r\nimport styles from './ContactList.module.css'\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\n\r\nconst ContactList = ({contacts, onDelete }) => {\r\n    return (\r\n        <ul className={styles.list}>\r\n            {contacts.map(({ id, name, number}) => (\r\n                <li key={id} className={styles.item}>\r\n                    {name}: {number}\r\n                    <button onClick={() => onDelete(id)} type=\"button\" className={styles.button}>DELETE</button>\r\n\r\n                </li>\r\n\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        }),\r\n    ).isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n};\r\nconst getVisibleContacts = (allContats, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return allContats.filter(({ name }) =>\r\n        name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { filter, items } }) => ({\r\n    contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDelete: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import styles from './Filter.module.css'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({value, onChange}) => (\r\n    <label className={styles.label}>\r\n        <input type=\"text\" value={value} onChange={onChange} className={styles.input}/>\r\n    </label>\r\n)\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = state => ({\r\n    value: state.contacts.filter,\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import PropTypes from 'prop-types'\r\nimport styles from './Section.module.css'\r\nconst Section = ({children}) => (\r\n    <section className={styles.section}> {children}\r\n    </section>\r\n)\r\nSection.propTypes = {children: PropTypes.node,\r\n};\r\nexport default Section","\n\nimport './App.css';\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport Filter from './components/Filter'\nimport Section from \"./components/Section\";\n\n\nfunction App() {\n    return (\n        <Section>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </Section>\n    );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, action) => [...state, action.payload],\r\n    [actions.deleteContact]: (state, action) => [\r\n        ...state.filter(({ id }) => id !== action.payload),\r\n    ],\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});\r\n\r\n// v1\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return [...state.filter(({ id }) => id !== payload)];\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'contacts/changeFilter':\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };","import logger from 'redux-logger';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n// v3\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n    },\r\n    middleware,\r\n    devtools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { store, persistor };\r\n\r\n// v1\r\n// const initialState = {};\r\n// // Функция, принимает предидущее состояние (state), действие (action)\r\n// const reducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     // case 'name':\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n\r\n//   // возвращает новое состояние\r\n//   return state;\r\n// };\r\n\r\n// v2\r\n// store - хранилище\r\n// const store = createStore(rootReducer, composeWithDevTools());","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store.store}>\n            <PersistGate loading={null} persistor={store.persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1uZUA\",\"label\":\"ContactForm_label__2ZCNz\",\"input\":\"ContactForm_input__E01hb\",\"button\":\"ContactForm_button__2dyIU\"};"],"sourceRoot":""}